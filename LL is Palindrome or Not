/* Java program to check if linked list is palindrome recursively */
import java.util.*;
class Node {
	int data;
	Node pointer;
	Node(int d)
	{
		pointer = null;
		data = d;
	}
}
class Main {	
	static boolean isPalindrome(Node head)
	{
		Node slow = head;
		boolean ispalindrome = true;
		Stack<Integer> stack = new Stack<Integer>();

		while (slow != null) {
			stack.push(slow.data);
			slow = slow.pointer;
		}
		while (head != null) {
			int i = stack.pop();
			if (head.data == i) {
				ispalindrome = true;
			}
			else {
				ispalindrome = false;
				break;
			}
			head = head.pointer;
		}
		return ispalindrome;
	}

public static void main(String args[])
	{
		Node one = new Node(1);
		Node two = new Node(2);
		Node three = new Node(3);
		Node four = new Node(4);
		Node five = new Node(3);
		Node six = new Node(2);
		Node seven = new Node(1);
		one.pointer = two;
		two.pointer = three;
		three.pointer = four;
		four.pointer = five;
		five.pointer = six;
		six.pointer = seven;
		boolean condition = isPalindrome(one);
		System.out.println("isPalidrome :" + condition);
	}
}

